// <auto-generated />
using System;
using DepartmentService.API.AppDbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DepartmentService.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DepartmentService.API.Entities.Article", b =>
                {
                    b.Property<Guid>("ArticleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentId")
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ArticleId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Articles");

                    b.HasData(
                        new
                        {
                            ArticleId = new Guid("a14fb4b4-9886-437b-add1-e4429424f6a2"),
                            Content = "Để đáp ứng nhu cầu mở rộng và phát triển nhân sự, Công ty đưa ra kế hoạch tuyển dụng chi tiết cho năm 2024-2025, bao gồm các vị trí cần thiết và tiêu chí lựa chọn ứng viên.",
                            DateCreated = new DateTime(2024, 10, 5, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = "HR",
                            Title = "Kế hoạch tuyển dụng năm 2024-2025",
                            Type = "Normal"
                        },
                        new
                        {
                            ArticleId = new Guid("53aa8629-51a7-4810-8e69-0cc8a4c4ebd3"),
                            Content = "Phòng Nhân sự thông báo lịch phỏng vấn tuyển dụng cho các vị trí trong đợt tuyển dụng tháng 10/2024. Ứng viên cần theo dõi lịch cụ thể để tham gia đúng giờ.",
                            DateCreated = new DateTime(2024, 10, 1, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = "IT",
                            Title = "Thông báo lịch phỏng vấn tuyển dụng",
                            Type = "Normal"
                        },
                        new
                        {
                            ArticleId = new Guid("32460e72-2ba1-420f-b32c-53f4e2e01be3"),
                            Content = "Ứng viên cần chuẩn bị hồ sơ đầy đủ theo hướng dẫn của Phòng Nhân sự, bao gồm CV, bằng cấp, chứng chỉ và các giấy tờ liên quan trước khi tham gia phỏng vấn.",
                            DateCreated = new DateTime(2024, 10, 3, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = "FN",
                            Title = "Hướng dẫn chuẩn bị hồ sơ ứng tuyển",
                            Type = "Normal"
                        },
                        new
                        {
                            ArticleId = new Guid("18fc6183-8a57-4deb-9d26-f28034395fc1"),
                            Content = "Phòng Nhân sự công bố báo cáo tổng kết hoạt động tuyển dụng trong năm 2023, bao gồm số lượng ứng viên, tỷ lệ trúng tuyển và hiệu quả các kênh tuyển dụng.",
                            DateCreated = new DateTime(2024, 9, 30, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = "FN",
                            Title = "Báo cáo tuyển dụng năm 2023",
                            Type = "Normal"
                        },
                        new
                        {
                            ArticleId = new Guid("9aa5e0da-57d8-4393-b9c9-5a30374f0703"),
                            Content = "Công ty triển khai nhiều chương trình đào tạo nội bộ nhằm nâng cao kỹ năng chuyên môn và năng lực quản lý cho nhân viên ở các cấp.",
                            DateCreated = new DateTime(2024, 10, 2, 12, 15, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = "IT",
                            Title = "Giới thiệu chương trình đào tạo nội bộ",
                            Type = "Normal"
                        },
                        new
                        {
                            ArticleId = new Guid("24e5b629-cd94-4364-bb64-63e5a7e72dda"),
                            Content = "Công ty tổ chức đánh giá định kỳ các chương trình đào tạo nội bộ để cải thiện nội dung và phương pháp giảng dạy, giúp nâng cao hiệu quả học tập của nhân viên.",
                            DateCreated = new DateTime(2024, 10, 4, 15, 45, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = "IT",
                            Title = "Đánh giá chất lượng đào tạo nội bộ",
                            Type = "Normal"
                        });
                });

            modelBuilder.Entity("DepartmentService.API.Entities.Department", b =>
                {
                    b.Property<string>("DepartmentId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manager")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            DepartmentId = "HR",
                            Contact = "+1-555-1234",
                            DepartmentName = "Human Resources",
                            Description = "Responsible for employee relations and HR policies.",
                            Location = "New York",
                            Manager = "John Doe"
                        },
                        new
                        {
                            DepartmentId = "IT",
                            Contact = "+1-555-5678",
                            DepartmentName = "Information Technology",
                            Description = "Handles all IT infrastructure and software development.",
                            Location = "San Francisco",
                            Manager = "Alice Smith"
                        },
                        new
                        {
                            DepartmentId = "FN",
                            Contact = "+1-555-9876",
                            DepartmentName = "Finance",
                            Description = "Manages company finances and budget planning.",
                            Location = "Chicago",
                            Manager = "Robert Brown"
                        });
                });

            modelBuilder.Entity("DepartmentService.API.Entities.Facility", b =>
                {
                    b.Property<string>("FacId")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<int>("Condition")
                        .HasColumnType("int");

                    b.Property<string>("DepartmentId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastMaintenanceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("UsedQuantity")
                        .HasColumnType("int");

                    b.HasKey("FacId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Facilities");

                    b.HasData(
                        new
                        {
                            FacId = "FAC001",
                            Condition = 0,
                            DepartmentId = "HR",
                            Description = "Conference room projector",
                            LastMaintenanceDate = new DateTime(2024, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Projector",
                            PurchaseDate = new DateTime(2023, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = 2,
                            UsedQuantity = 1
                        },
                        new
                        {
                            FacId = "FAC002",
                            Condition = 1,
                            DepartmentId = "HR",
                            Description = "Ergonomic office chairs for HR department",
                            LastMaintenanceDate = new DateTime(2024, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Office Chairs",
                            PurchaseDate = new DateTime(2022, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = 20,
                            UsedQuantity = 18
                        },
                        new
                        {
                            FacId = "FAC003",
                            Condition = 2,
                            DepartmentId = "IT",
                            Description = "Data center server rack",
                            LastMaintenanceDate = new DateTime(2023, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Server Rack",
                            PurchaseDate = new DateTime(2021, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = 5,
                            UsedQuantity = 5
                        },
                        new
                        {
                            FacId = "FAC004",
                            Condition = 1,
                            DepartmentId = "IT",
                            Description = "High-performance computers for software development",
                            LastMaintenanceDate = new DateTime(2024, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Developer Workstations",
                            PurchaseDate = new DateTime(2023, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = 10,
                            UsedQuantity = 9
                        },
                        new
                        {
                            FacId = "FAC005",
                            Condition = 2,
                            DepartmentId = "FN",
                            Description = "Enterprise license for financial software",
                            Name = "Accounting Software License",
                            PurchaseDate = new DateTime(2023, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = 1,
                            UsedQuantity = 1
                        });
                });

            modelBuilder.Entity("DepartmentService.API.Entities.JobPosition", b =>
                {
                    b.Property<string>("JobPositionId")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("DepartmentId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Manager")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PositionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("JobPositionId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("JobPositions");

                    b.HasData(
                        new
                        {
                            JobPositionId = "HRM01",
                            DepartmentId = "HR",
                            Description = "Responsible for managing HR team and policies.",
                            Level = 1,
                            Manager = "John Doe",
                            PositionName = "HR Manager"
                        },
                        new
                        {
                            JobPositionId = "HRR02",
                            DepartmentId = "HR",
                            Description = "Handles recruitment and interviewing processes.",
                            Level = 2,
                            Manager = "Jane Smith",
                            PositionName = "Recruitment Specialist"
                        },
                        new
                        {
                            JobPositionId = "ITS01",
                            DepartmentId = "IT",
                            Description = "Develops and maintains software applications.",
                            Level = 0,
                            Manager = "Alice Johnson",
                            PositionName = "Software Engineer"
                        },
                        new
                        {
                            JobPositionId = "ITS02",
                            DepartmentId = "IT",
                            Description = "Manages IT infrastructure and networks.",
                            Level = 1,
                            Manager = "Bob Williams",
                            PositionName = "System Administrator"
                        },
                        new
                        {
                            JobPositionId = "FNA01",
                            DepartmentId = "FN",
                            Description = "Analyzes financial data and prepares reports.",
                            Level = 3,
                            Manager = "Robert Brown",
                            PositionName = "Finance Analyst"
                        },
                        new
                        {
                            JobPositionId = "FNA02",
                            DepartmentId = "FN",
                            Description = "Manages company financial records and transactions.",
                            Level = 2,
                            Manager = "Emily Davis",
                            PositionName = "Accountant"
                        });
                });

            modelBuilder.Entity("DepartmentService.API.Entities.Media", b =>
                {
                    b.Property<Guid>("MediaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArticleID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MediaContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MediaType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MediaUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MediaID");

                    b.HasIndex("ArticleID");

                    b.ToTable("Medias");

                    b.HasData(
                        new
                        {
                            MediaID = new Guid("3f64434c-0c5e-4b28-9e87-ef0562c9536c"),
                            ArticleID = new Guid("a14fb4b4-9886-437b-add1-e4429424f6a2"),
                            MediaType = "image",
                            MediaUrl = "https://firebasestorage.googleapis.com/v0/b/tsdhbk-632bb.appspot.com/o/slide2_1.png?alt=media&token=bc2ae7c2-f47e-4883-a600-7cc5c34e9c5e"
                        },
                        new
                        {
                            MediaID = new Guid("c87767bd-dbfa-4416-a500-ee8bf14227f2"),
                            ArticleID = new Guid("53aa8629-51a7-4810-8e69-0cc8a4c4ebd3"),
                            MediaType = "video/mp4",
                            MediaUrl = "https://www.youtube.com/watch?v=xLrHnIiAack"
                        },
                        new
                        {
                            MediaID = new Guid("9f2b04f0-4a38-4abc-823d-b83e618ff4ad"),
                            ArticleID = new Guid("32460e72-2ba1-420f-b32c-53f4e2e01be3"),
                            MediaType = "image",
                            MediaUrl = "https://firebasestorage.googleapis.com/v0/b/tsdhbk-632bb.appspot.com/o/HY%2Ftd6.jpg?alt=media&token=a3878a22-1a97-40ae-bbbe-2cd3eac03cf9"
                        },
                        new
                        {
                            MediaID = new Guid("266cc1fd-8d23-461a-bbed-17d8d77ad97b"),
                            ArticleID = new Guid("18fc6183-8a57-4deb-9d26-f28034395fc1"),
                            MediaType = "video/mp4",
                            MediaUrl = "https://www.youtube.com/watch?v=8yVew7OrJdI"
                        },
                        new
                        {
                            MediaID = new Guid("bd669f86-a9c3-476e-8975-1efccf6ad3c5"),
                            ArticleID = new Guid("9aa5e0da-57d8-4393-b9c9-5a30374f0703"),
                            MediaType = "image",
                            MediaUrl = "https://firebasestorage.googleapis.com/v0/b/tsdhbk-632bb.appspot.com/o/xttn%2FPOST-NG-a-NG-Ia-M-XTTN-2024-XT-6188-2429-1718331174.png?alt=media&token=6aba61bc-23b6-4f31-8d8d-5f81c1586951"
                        });
                });

            modelBuilder.Entity("DepartmentService.API.Entities.OwnFacilities", b =>
                {
                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FacilityId")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.HasKey("OwnerId", "FacilityId");

                    b.HasIndex("FacilityId");

                    b.ToTable("OwnFacilities");

                    b.HasData(
                        new
                        {
                            OwnerId = new Guid("63e29a28-bc90-4cd1-8f9e-ab9834bdde6c"),
                            FacilityId = "FAC001"
                        },
                        new
                        {
                            OwnerId = new Guid("d05780d4-5742-40ca-8403-0febd44b1555"),
                            FacilityId = "FAC002"
                        },
                        new
                        {
                            OwnerId = new Guid("63e29a28-bc90-4cd1-8f9e-ab9834bdde6c"),
                            FacilityId = "FAC005"
                        },
                        new
                        {
                            OwnerId = new Guid("63e29a28-bc90-4cd1-8f9e-ab9834bdde6c"),
                            FacilityId = "FAC004"
                        });
                });

            modelBuilder.Entity("DepartmentService.API.Entities.Project", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartmentId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Members")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ProjectAttachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectManager")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Visibility")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjectId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            ProjectId = new Guid("550e8400-e29b-41d4-a716-446655440000"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "admin",
                            DepartmentId = "FN",
                            Description = "Phát triển hệ thống quản lý nhân sự",
                            EndDate = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "HRM System Development",
                            StartDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "In Progress"
                        },
                        new
                        {
                            ProjectId = new Guid("550e8400-e29b-41d4-a716-446655440002"),
                            CreatedAt = new DateTime(2024, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "admin",
                            DepartmentId = "FN",
                            Description = "Xây dựng nền tảng học trực tuyến",
                            EndDate = new DateTime(2024, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "E-Learning Platform",
                            StartDate = new DateTime(2024, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Planning"
                        },
                        new
                        {
                            ProjectId = new Guid("550e8400-e29b-41d4-a716-446655440003"),
                            CreatedAt = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "admin",
                            DepartmentId = "IT",
                            Description = "Phát triển ứng dụng di động",
                            EndDate = new DateTime(2024, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mobile App Development",
                            StartDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Planning"
                        });
                });

            modelBuilder.Entity("DepartmentService.API.Entities.ProjectTask", b =>
                {
                    b.Property<Guid>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AssignedTo")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Attachments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TaskId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            TaskId = new Guid("550e8400-e29b-41d4-a716-446655440010"),
                            AssignedTo = new Guid("550e8400-e29b-41d4-a716-446655440001"),
                            CompletedAt = new DateTime(2024, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "admin",
                            Deadline = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Thiết kế cấu trúc database cho hệ thống HRM",
                            Priority = "High",
                            ProjectId = new Guid("550e8400-e29b-41d4-a716-446655440000"),
                            StartDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Completed",
                            Title = "Thiết kế Database",
                            UpdatedAt = new DateTime(2024, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = "admin"
                        },
                        new
                        {
                            TaskId = new Guid("550e8400-e29b-41d4-a716-446655440011"),
                            AssignedTo = new Guid("550e8400-e29b-41d4-a716-446655440002"),
                            CreatedAt = new DateTime(2024, 1, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "admin",
                            Deadline = new DateTime(2024, 1, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Xây dựng hệ thống xác thực và phân quyền",
                            Priority = "High",
                            ProjectId = new Guid("550e8400-e29b-41d4-a716-446655440000"),
                            StartDate = new DateTime(2024, 1, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "In Progress",
                            Title = "Phát triển API Authentication"
                        },
                        new
                        {
                            TaskId = new Guid("550e8400-e29b-41d4-a716-446655440012"),
                            AssignedTo = new Guid("550e8400-e29b-41d4-a716-446655440003"),
                            CreatedAt = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "admin",
                            Deadline = new DateTime(2024, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Thiết kế giao diện người dùng cho ứng dụng di động",
                            Priority = "Medium",
                            ProjectId = new Guid("550e8400-e29b-41d4-a716-446655440003"),
                            StartDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "To Do",
                            Title = "Thiết kế UI/UX"
                        });
                });

            modelBuilder.Entity("DepartmentService.Entities.AppliedCv", b =>
                {
                    b.Property<Guid>("CVID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplyDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromMail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Header")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CVID");

                    b.ToTable("AppliedCvs");
                });

            modelBuilder.Entity("DepartmentService.API.Entities.Article", b =>
                {
                    b.HasOne("DepartmentService.API.Entities.Department", "Department")
                        .WithMany("Articles")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Department");
                });

            modelBuilder.Entity("DepartmentService.API.Entities.Facility", b =>
                {
                    b.HasOne("DepartmentService.API.Entities.Department", "Department")
                        .WithMany("Facilities")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("DepartmentService.API.Entities.JobPosition", b =>
                {
                    b.HasOne("DepartmentService.API.Entities.Department", "Department")
                        .WithMany("JobPositions")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("DepartmentService.API.Entities.Media", b =>
                {
                    b.HasOne("DepartmentService.API.Entities.Article", "Article")
                        .WithMany("medias")
                        .HasForeignKey("ArticleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");
                });

            modelBuilder.Entity("DepartmentService.API.Entities.OwnFacilities", b =>
                {
                    b.HasOne("DepartmentService.API.Entities.Facility", "Facility")
                        .WithMany()
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facility");
                });

            modelBuilder.Entity("DepartmentService.API.Entities.Project", b =>
                {
                    b.HasOne("DepartmentService.API.Entities.Department", "Department")
                        .WithMany("Projects")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("DepartmentService.API.Entities.ProjectTask", b =>
                {
                    b.HasOne("DepartmentService.API.Entities.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("DepartmentService.API.Entities.Article", b =>
                {
                    b.Navigation("medias");
                });

            modelBuilder.Entity("DepartmentService.API.Entities.Department", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Facilities");

                    b.Navigation("JobPositions");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("DepartmentService.API.Entities.Project", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
